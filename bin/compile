#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e


############################# FORK #############################
#
# This is a fork of the standard heroku grails buildpack that
# incorporates a number of steps from the node buildpacl so
# that we can use r.js and uglify on node for speedy compilation.
#


############################# NODE BUILD PACK #############################


# clean up leaking environment
unset GIT_DIR

# config
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function manifest_versions() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
}

function resolve_version() {
  available_versions="$1"
  requested_version="$2"
  default_version="$3"

  args=""
  for version in $available_versions; do args="${args} -v \"${version}\""; done

  if [ "$2" == "" ]; then
    args="${args} -r \"${default_version}\"";
  else
    args="${args} -r \"${requested_version}\"";
  fi

  evaluated_versions=$(eval $bootstrap_node/bin/node $LP_DIR/vendor/node-semver/bin/semver ${args} || echo "")
  echo "$evaluated_versions" | tail -n 1
}

function package_engine_version() {
  version=$(cat $BUILD_DIR/package.json | $bootstrap_node/bin/node $LP_DIR/vendor/json/json engines.$1 2>/dev/null)
  if [ $? == 0 ]; then
    echo $version | sed -e 's/\([<>=]\) /\1/g'
  fi
}

function package_resolve_version() {
  engine="$1"
  resolved_version=$(resolve_version "${engine_versions[$engine]}" "${engine_requests[$engine]}" "${engine_defaults[$engine]}")

  if [ "${resolved_version}" == "" ]; then
    error "Requested engine $engine version ${engine_requests[$engine]} does not match available versions: ${engine_versions[$engine]}"
  else
    echo $resolved_version
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

bootstrap_node=$(mktmpdir bootstrap_node)
package_download "nodejs" "0.4.7" $bootstrap_node

# make some associative arrays
declare -A engine_versions
declare -A engine_defaults
declare -A engine_requests

engine_defaults["node"]="0.10.x"
engine_defaults["npm"]="1.2.x"

engine_versions["node"]=$(manifest_versions "nodejs")
engine_requests["node"]=$(package_engine_version "node")

engine_versions["npm"]=$(manifest_versions "npm")
engine_requests["npm"]=$(package_engine_version "npm")

echo "-----> Resolving engine versions"

# add a warning if no version of node specified
if [ "${engine_requests["node"]}" == "" ]; then
  echo
  echo "WARNING: No version of Node.js specified in package.json, see:" | indent
  echo "https://devcenter.heroku.com/articles/nodejs-versions" | indent
  echo
fi

NODE_VERSION=$(package_resolve_version "node")
echo "Using Node.js version: ${NODE_VERSION}" | indent

NPM_VERSION=$(package_resolve_version "npm")
echo "Using npm version: ${NPM_VERSION}" | indent

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

###### NOTE below not required, included for completeness.
# install dependencies with npm
#echo "-----> Installing dependencies with npm"
#run_npm "install --production"
#run_npm "rebuild"
#echo "Dependencies installed" | indent

#echo "-----> Building runtime environment"
#mkdir -p $BUILD_DIR/.profile.d
#echo "export PATH=\"\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh



############################# ORIGINAL GRAILS BUILD PACK #############################



BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# source in common functions
. $BIN_DIR/common.sh

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

GRAILS_DIR=".grails"

check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails()
{
  VER_TO_INSTALL=$1
  GRAILS_URL="http://s3.amazonaws.com/heroku-jvm-buildpack-grails/grails-$VER_TO_INSTALL.tar.gz"

  GRAILS_TAR_FILE="grails-heroku.tar.gz"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_TAR_FILE

  # Error checking
  if [ ! -f $GRAILS_TAR_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  tar xzf $GRAILS_TAR_FILE
  rm $GRAILS_TAR_FILE

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi

GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"
echo "       WARNING: The Grails buildpack is currently in Beta."

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

# install JDK
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

cd $CACHE_DIR

# install grails
if [ ! -d $GRAILS_DIR ]; then
  install_grails $GRAILS_VERSION
else
  INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
  if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
    echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
    rm -rf $GRAILS_DIR
    install_grails $GRAILS_VERSION
  fi
fi

# This is a simplisitic way to only set JAVA_HOME when on Cedar. If you run this
# script locally and your jdk is not in this location, you're responsible for
# setting it yourself. Need to find a smarter way of conditionally setting this var
if [ -d /usr/lib/jvm/java-6-openjdk ] ; then
    export JAVA_HOME=/usr/lib/jvm/java-6-openjdk
fi
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

cd $BUILD_DIR

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# Cache priming option
# if a populated cache was checked in copy it into the cache
# remove the checked in cache dir aftewards to save slug size
if [ -d ivy-cache ]; then
  echo "-----> Found ivy-cache directory in the repo. Using it to prime the cache"
  cp -r ivy-cache $CACHE_DIR/.grails_cache/
  rm -r ivy-cache
fi

# create .grails directory in the user home and write a settings.groovy that points grails
# at the correct cache directory
if [ ! -d $HOME/.grails ]; then
  mkdir $HOME/.grails
fi

echo "grails.dependency.cache.dir = '$CACHE_DIR/.grails_cache'" >> $HOME/.grails/settings.groovy

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
fi

COMPILECMD="grails -Divy.default.ivy.user.dir=$CACHE_DIR compile --non-interactive"
echo "-----> Executing $COMPILECMD"
eval "$COMPILECMD" | sed -u 's/^/       /'
check_build_status

BUILDCMD="grails $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war --non-interactive"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

if [ ! -d server ] ; then
    JETTY_RUNNER_VERSION=7.5.4.v20111024

    echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
    mkdir server
    cp $GRAILS_HOME/jetty-runner-$JETTY_RUNNER_VERSION.jar server/jetty-runner.jar
    echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    echo "vendored:$JETTY_RUNNER_VERSION" > $CACHE_DIR/jettyVersion
fi
